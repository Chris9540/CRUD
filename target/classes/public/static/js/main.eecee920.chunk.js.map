{"version":3,"sources":["components/Header.jsx","components/Footer.jsx","components/EmployeeList.jsx","service/EmployeeService.js","App.js","serviceWorker.js","index.js"],"names":["Header","AppBar","color","Toolbar","variant","Typography","useStyles","makeStyles","theme","root","backgroundColor","display","flexDirection","alignItems","palette","text","primary","paddingLeft","spacing","paddingRight","Footer","classes","className","EmployeeList","useState","rows","setRows","page","size","useEffect","axios","get","BASE_URL","params","EmployeeService","then","res","data","TableContainer","component","Paper","Table","TableHead","TableRow","TableCell","align","TableBody","map","row","key","scope","id","fistName","lastName","Button","container","padding","App","Boolean","window","location","hostname","match","createMuiTheme","rawTheme","ReactDOM","render","StrictMode","ThemeProvider","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"yrCAEe,SAASA,IACpB,OACI,6BACI,kBAACC,EAAA,EAAD,CAAQC,MAAO,WACX,kBAACC,EAAA,EAAD,CAASC,QAAS,SACd,kBAACC,EAAA,EAAD,CAAYD,QAAS,MAArB,qB,YCHdE,EAAYC,aAAW,SAACC,GAAD,MAAY,CACrCC,KAAM,CACFC,gBAAiB,UACjBC,QAAS,OACTC,cAAe,MACfC,WAAY,SACZX,MAAQM,EAAMM,QAAQC,KAAKC,QAC3BC,YAAaT,EAAMU,UACnBC,aAAcX,EAAMU,eAIb,SAASE,IACpB,IAAMC,EAAUf,IAEhB,OACI,4BAAQgB,UAAWD,EAAQZ,MACvB,kBAACJ,EAAA,EAAD,wB,+FCHG,SAASkB,IAAgB,IAAD,EACXC,mBAAS,IADE,mBAC5BC,EAD4B,KACtBC,EADsB,OAEXF,mBAAS,GAFE,mBAE5BG,EAF4B,aAGXH,mBAAS,IAHE,mBAG5BI,EAH4B,UAgBnC,OATAC,qBAAU,YCpBC,SAAyBF,EAAMC,GAC1C,OAAOE,IAAMC,IAHIC,mCAGc,CAACC,OAAO,CAACN,KAAOA,EAAMC,KAAMA,MDoBnDM,CAAgBP,EAAMC,GAAMO,MAAK,SAAAC,GAC7BV,EAAQU,EAAIC,YAQpB,kBAACC,EAAA,EAAD,CAAgBC,UAAWC,KACvB,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAWC,MAAO,UAAlB,MACA,kBAACD,EAAA,EAAD,CAAWC,MAAO,UAAlB,cACA,kBAACD,EAAA,EAAD,CAAWC,MAAO,UAAlB,aACA,kBAACD,EAAA,EAAD,CAAWC,MAAO,UAAlB,aAGR,kBAACC,EAAA,EAAD,KAEQrB,EAAKsB,KAAI,SAACC,EAAKC,GAAN,OACL,kBAACN,EAAA,EAAD,CAAUM,IAAKA,GACX,kBAACL,EAAA,EAAD,CAAWL,UAAW,KAAMW,MAAO,OAC9BF,EAAIG,IAET,kBAACP,EAAA,EAAD,KAAYI,EAAII,UAChB,kBAACR,EAAA,EAAD,KAAYI,EAAIK,UAChB,kBAACT,EAAA,EAAD,KACI,kBAACU,EAAA,EAAD,aACA,kBAACA,EAAA,EAAD,uBElDpC,IAAMhD,EAAYC,aAAW,SAACC,GAAD,MAAY,CACrC+C,UAAW,CACPC,QAAUhD,EAAMU,eAiBTuC,MAbf,WACI,IAAMpC,EAAUf,IACd,OACE,yBAAKgB,UAAU,OACX,kBAACtB,EAAD,MACA,yBAAKsB,UAAWD,EAAQkC,WACpB,kBAAChC,EAAD,OAEJ,kBAACH,EAAD,QCRQsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,mCCTAtD,EAAQuD,YAAeC,GAE7BC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACI,kBAACC,EAAA,EAAD,CAAe5D,MAAOA,GAClB,kBAAC,EAAD,QAGR6D,SAASC,eAAe,SDkHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtC,MAAK,SAAAuC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.eecee920.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {AppBar, Toolbar, Typography} from \"@material-ui/core\";\r\nexport default function Header() {\r\n    return (\r\n        <div>\r\n            <AppBar color={\"default\"}>\r\n                <Toolbar variant={\"dense\"}>\r\n                    <Typography variant={\"h6\"}>\r\n                        Employees CRUD\r\n                    </Typography>\r\n                </Toolbar>\r\n            </AppBar>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport {Typography} from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        backgroundColor: '#212121',\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        alignItems: 'center',\r\n        color : theme.palette.text.primary,\r\n        paddingLeft: theme.spacing(),\r\n        paddingRight: theme.spacing(),\r\n    }\r\n}));\r\n\r\nexport default function Footer() {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <footer className={classes.root}>\r\n            <Typography>Chris Brighton</Typography>\r\n        </footer>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n","import React, {useEffect, useState} from \"react\";\r\nimport axios from 'axios';\r\nimport {\r\n    Button,\r\n    Paper,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    Typography\r\n} from \"@material-ui/core\";\r\nimport EmployeeService from \"../service/EmployeeService\";\r\n\r\n\r\n\r\n\r\nexport default function EmployeeList() {\r\n    const [rows, setRows] = useState([]);\r\n    const [page, setPage] = useState(1);\r\n    const [size, setSize] = useState(5);\r\n\r\n\r\n\r\n    useEffect(()=>{\r\n            EmployeeService(page, size).then(res=>{\r\n                setRows(res.data);\r\n            });\r\n    })\r\n\r\n\r\n\r\n\r\n    return (\r\n        <TableContainer component={Paper}>\r\n            <Table>\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell align={\"center\"}>Id</TableCell>\r\n                        <TableCell align={\"center\"}>First Name</TableCell>\r\n                        <TableCell align={\"center\"}>Last Name</TableCell>\r\n                        <TableCell align={\"center\"}>Actions</TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {\r\n                        rows.map((row, key)=> (\r\n                            <TableRow key={key}>\r\n                                <TableCell component={\"th\"} scope={\"row\"}>\r\n                                    {row.id}\r\n                                </TableCell>\r\n                                <TableCell>{row.fistName}</TableCell>\r\n                                <TableCell>{row.lastName}</TableCell>\r\n                                <TableCell>\r\n                                    <Button>Edit</Button>\r\n                                    <Button>Delete</Button>\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        ))\r\n                    }\r\n                </TableBody>\r\n            </Table>\r\n        </TableContainer>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n","import axios from 'axios';\r\n\r\nconst BASE_URL = \"http://localhost:8080\"\r\nconst EMPLOYEE_URL = BASE_URL + \"/api/v1/emp\";\r\n\r\nexport default function EmployeeService(page, size) {\r\n    return axios.get(EMPLOYEE_URL, {params:{page : page, size: size}})\r\n}","import React, {useEffect, useState} from 'react';\nimport Header from \"./components/Header\";\nimport Footer from \"./components/Footer\";\nimport EmployeeList from \"./components/EmployeeList\";\nimport { makeStyles, } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n    container: {\n        padding : theme.spacing(),\n    }\n}));\n\nfunction App() {\n    const classes = useStyles();\n      return (\n        <div className=\"App\">\n            <Header/>\n            <div className={classes.container}>\n                <EmployeeList/>\n            </div>\n            <Footer/>\n        </div>\n      );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'fontsource-roboto';\nimport {createMuiTheme, ThemeProvider} from '@material-ui/core/styles';\nimport rawTheme from './theme.json'\n\nconst theme = createMuiTheme(rawTheme)\n\nReactDOM.render(\n  <React.StrictMode>\n      <ThemeProvider theme={theme}>\n          <App />\n      </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}