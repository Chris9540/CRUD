{"version":3,"sources":["components/Header.jsx","components/Footer.jsx","service/URLS.js","service/services.js","components/ColorButton.jsx","components/EmployeeList.jsx","components/AddEmployee.jsx","components/UpdateEmployee.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","props","AppBar","color","Toolbar","variant","Typography","style","flex","Button","onClick","setView","startIcon","useStyles","makeStyles","theme","root","backgroundColor","display","flexDirection","alignItems","palette","text","primary","paddingLeft","spacing","paddingRight","Footer","classes","className","EMPLOYEE_URL","toString","apiServices","list","page","size","axios","get","params","Number","count","add","employee","post","delete","id","update","put","ColorButton","createMuiTheme","type","shape","borderRadius","ThemeProvider","buttonProps","textTransform","children","container","maxHeight","minHeight","height","pagination","button","margin","HeadCell","withStyles","head","TableCell","StyledTableRow","action","hover","TableRow","EmployeeList","useState","rows","setRows","setPage","setSize","setCount","getData","p","s","then","res","data","useEffect","Paper","TableContainer","component","Table","stickyHeader","TableHead","header","align","TableBody","map","row","key","scope","firstName","lastName","emailId","marginRight","red","TablePagination","rowsPerPageOptions","rowsPerPage","onChangePage","e","newPage","onChangeRowsPerPage","parseInt","target","value","console","log","width","padding","form","space","marginBottom","buttonWrap","justifyContent","AddEmployee","inputProps","fullWidth","required","setFirstName","setLastName","setEmailId","noValidate","autoComplete","TextField","onChange","label","green","preventDefault","UpdateEmployee","employeeId","setEmployeeId","App","view","fade","setFade","updateId","setUpdateId","toggleView","v","setTimeout","Fade","in","timeout","Boolean","window","location","hostname","match","rawTheme","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8eed5803.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {AppBar, Toolbar, Typography} from \"@material-ui/core\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport ListIcon from '@material-ui/icons/List';\r\nimport PersonAddIcon from '@material-ui/icons/PersonAdd';\r\n\r\nexport default function Header(props) {\r\n    return (\r\n        <div>\r\n            <AppBar color={\"default\"}>\r\n                <Toolbar variant={\"dense\"}>\r\n                    <Typography variant={\"h6\"} style={{flex:1}} color={\"primary\"}>\r\n                        Employees CRUD\r\n                    </Typography>\r\n                    <Button\r\n                        onClick={()=>props.setView(\"list\")}\r\n                        startIcon={<ListIcon/>}\r\n                    >List Employees</Button>\r\n                    <Button\r\n                        onClick={()=>props.setView(\"add\")}\r\n                        startIcon={<PersonAddIcon/>}\r\n                    >Add Employee</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport {Typography} from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        backgroundColor: '#212121',\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        alignItems: 'center',\r\n        color : theme.palette.text.primary,\r\n        paddingLeft: theme.spacing(),\r\n        paddingRight: theme.spacing(),\r\n    }\r\n}));\r\n\r\nexport default function Footer() {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <footer className={classes.root}>\r\n            <Typography>Chris Brighton</Typography>\r\n        </footer>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n","\r\nconst VERSION = 1;\r\nconst BASE_URL = \"http://localhost:8080/api/v\" + VERSION.toString() + \"/\";\r\nexport const EMPLOYEE_URL = BASE_URL + \"employee\";","import axios from 'axios';\r\nimport {EMPLOYEE_URL} from \"./URLS\";\r\n\r\nconst employee = {\r\n    list : function (page = 0, size = 5) {\r\n        return axios.get(`${EMPLOYEE_URL}/paged-list`, {params:{page : Number(page) , size: Number(size)}})\r\n    },\r\n    count : function () {\r\n        return axios.get(`${EMPLOYEE_URL}/count`)\r\n    },\r\n    add : function (employee) {\r\n        return axios.post(`${EMPLOYEE_URL}/add`, employee)\r\n    },\r\n    delete : function (id) {\r\n\r\n    },\r\n    get : function (id) {\r\n        return axios.get(`${EMPLOYEE_URL}/get`,{params:{id:id}});\r\n    },\r\n    update : function (id, employee) {\r\n        return axios.put(`${EMPLOYEE_URL}/update?id=${id}`, employee)\r\n    },\r\n}\r\n\r\n\r\nexport const apiServices = {\r\n    employee : employee,\r\n};","import {ThemeProvider} from \"@material-ui/styles\";\r\nimport {Button, createMuiTheme} from \"@material-ui/core\";\r\nimport React from \"react\";\r\n\r\nexport default function ColorButton(props) {\r\n    const theme = createMuiTheme({\r\n        palette : {primary : props.color, type: \"dark\",},\r\n        shape : {borderRadius : 0},\r\n    })\r\n    return(\r\n        <ThemeProvider theme={theme}>\r\n            <Button {...props.buttonProps} style={{textTransform : 'capitalize', color : '#000'}}>\r\n                {props.children}\r\n            </Button>\r\n        </ThemeProvider>\r\n    )\r\n}","import React, {useEffect, useState} from \"react\";\r\nimport {\r\n    Button,\r\n    Paper,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    withStyles\r\n} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/styles\";\r\nimport TablePagination from \"@material-ui/core/TablePagination\";\r\nimport {apiServices} from \"../service/services\";\r\nimport ColorButton from \"./ColorButton\";\r\nimport {red} from \"@material-ui/core/colors\";\r\n\r\nconst height = 300;\r\nconst useStyles = makeStyles((theme) => ({\r\n    container : {\r\n        maxHeight : height,\r\n        minHeight : height,\r\n        height : height,\r\n    },\r\n    pagination : {\r\n        backgroundColor : '#212121',\r\n    },\r\n    button: {\r\n        margin: theme.spacing(),\r\n    }\r\n}))\r\n\r\nconst HeadCell = withStyles((theme)=>({\r\n    head :{\r\n        backgroundColor: '#212121'\r\n    }\r\n}))(TableCell)\r\n\r\nconst StyledTableRow = withStyles((theme) => ({\r\n    root: {\r\n        '&:nth-of-type(odd)': {\r\n            backgroundColor: theme.palette.action.hover,\r\n        },\r\n    },\r\n}))(TableRow);\r\n\r\nexport default function EmployeeList(props) {\r\n    const [rows, setRows] = useState([]);\r\n    const [page, setPage] = useState(0);\r\n    const [size, setSize] = useState(5);\r\n    const [count, setCount] = useState(-1);\r\n    const classes = useStyles();\r\n\r\n\r\n    const changePage = (e, newPage) => {\r\n        setPage(newPage);\r\n        getData(newPage, size);\r\n    }\r\n\r\n    const changeSize = (e) => {\r\n        setSize(parseInt(e.target.value));\r\n        setPage(0);\r\n        console.log(\"size\", parseInt(e.target.value))\r\n        getData(0,  parseInt(e.target.value));\r\n    }\r\n\r\n    const getData = (p, s) => {\r\n        apiServices.employee.list(p, s).then(res=>{\r\n            setRows(res.data);\r\n        });\r\n    }\r\n\r\n    useEffect(()=>{\r\n        if (count === -1) {\r\n            apiServices.employee.count().then(res=>{\r\n                setCount(res.data);\r\n            })\r\n            getData(page, size);\r\n        }\r\n    }, [])\r\n    return (\r\n        <Paper>\r\n            <Button\r\n                variant={\"contained\"}\r\n                color={\"primary\"}\r\n                className={classes.button}\r\n                onClick={()=>props.setView(\"add\")}\r\n            >\r\n                Add Employee\r\n            </Button>\r\n            <TableContainer component={\"div\"} className={classes.container}>\r\n                <Table size={\"small\"} stickyHeader>\r\n                    <TableHead className={classes.header}>\r\n                        <TableRow>\r\n                            <HeadCell component={\"th\"}>\r\n                                Id\r\n                            </HeadCell>\r\n                            <HeadCell component={\"th\"}>\r\n                                First Name\r\n                            </HeadCell>\r\n                            <HeadCell component={\"th\"}>\r\n                                Last Name\r\n                            </HeadCell>\r\n                            <HeadCell component={\"th\"}>\r\n                                Email\r\n                            </HeadCell>\r\n                            <HeadCell component={\"th\"} align={\"right\"}>\r\n                                Actions\r\n                            </HeadCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {\r\n                            rows.map((row, key)=> (\r\n                                <StyledTableRow key={key}>\r\n                                    <TableCell component={\"th\"} scope={\"row\"}>\r\n                                        {row.id}\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {row.firstName}\r\n                                    </TableCell>\r\n                                    <TableCell >\r\n                                        {row.lastName}\r\n                                    </TableCell>\r\n                                    <TableCell >\r\n                                        {row.emailId}\r\n                                    </TableCell>\r\n                                    <TableCell align={\"right\"}>\r\n                                        <Button\r\n                                            variant={\"contained\"}\r\n                                            size={\"small\"}\r\n                                            style={{marginRight : '20px'}}\r\n                                            color={\"secondary\"}\r\n                                            onClick={()=>props.setView(\"update\", row.id)}\r\n                                        >\r\n                                            Edit\r\n                                        </Button>\r\n                                        <ColorButton\r\n                                            color={red}\r\n                                            buttonProps={{\r\n                                                variant : 'contained',\r\n                                                color : 'primary',\r\n                                                size: 'small'\r\n                                            }}\r\n                                        >\r\n                                            Delete\r\n                                        </ColorButton>\r\n                                    </TableCell>\r\n                                </StyledTableRow>\r\n                            ))\r\n                        }\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n            <TablePagination\r\n                rowsPerPageOptions={[5, 10, 25]}\r\n                component=\"div\"\r\n                rowsPerPage={size}\r\n                page={page}\r\n                count={count}\r\n                onChangePage={changePage}\r\n                onChangeRowsPerPage={changeSize}\r\n                className={classes.pagination}\r\n            />\r\n        </Paper>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n","import React, {useState} from \"react\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport ColorButton from \"./ColorButton\";\r\nimport {green, red} from \"@material-ui/core/colors\";\r\nimport {apiServices} from \"../service/services\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display : 'flex',\r\n        flexDirection : 'column',\r\n        alignItems : 'center',\r\n        width : 450,\r\n        margin : 'auto',\r\n        padding : theme.spacing(),\r\n    },\r\n    form : {\r\n        display : 'flex',\r\n        flexDirection : 'column',\r\n        alignItems : 'center',\r\n        padding: theme.spacing(),\r\n        width : '-webkit-fill-available',\r\n    },\r\n    space : {\r\n        marginBottom: theme.spacing(),\r\n    },\r\n    buttonWrap : {\r\n        width : '-webkit-fill-available',\r\n        display: 'flex',\r\n        justifyContent: 'space-evenly',\r\n    }\r\n}));\r\n\r\nexport default function AddEmployee(props) {\r\n    const classes = useStyles();\r\n\r\n    const inputProps = {\r\n        className : classes.space,\r\n        fullWidth : true,\r\n        required : true,\r\n    }\r\n\r\n\r\n    const [firstName, setFirstName] = useState('');\r\n    const [lastName, setLastName] = useState('');\r\n    const [emailId, setEmailId] = useState('');\r\n\r\n    const saveEmployee = (e) => {\r\n        e.preventDefault();\r\n        if (firstName !== '' && lastName !== '' && emailId !== '') {\r\n            apiServices.employee.add({\r\n                firstName:firstName,\r\n                lastName:lastName,\r\n                emailId:emailId})\r\n                .then(res => {\r\n                    props.setView('list');\r\n                }\r\n            );\r\n        }\r\n    }\r\n\r\n    const cancel = (e) => {\r\n        e.preventDefault();\r\n        setFirstName('');\r\n        setLastName('');\r\n        setEmailId('');\r\n        props.setView('list');\r\n    }\r\n\r\n    return (\r\n        <Paper className={classes.root}>\r\n            <Typography variant={\"h4\"} className={classes.space}>Create Employee</Typography>\r\n            <form noValidate autoComplete={\"off\"} className={classes.form}>\r\n                <TextField {...inputProps} value={firstName} onChange={(e)=>{setFirstName(e.target.value)}} id={\"firstName\"} label={\"First Name\"}/>\r\n                <TextField {...inputProps} value={lastName}  onChange={(e)=>{setLastName(e.target.value)}} id={\"lastName\"} label={\"Last Name\"}/>\r\n                <TextField {...inputProps} value={emailId}   onChange={(e)=>{setEmailId(e.target.value)}} id={\"emailId\"} label={\"Email Address\"}/>\r\n                <div className={classes.buttonWrap}>\r\n                    <ColorButton\r\n                        color={green}\r\n                        buttonProps={{\r\n                            variant : 'contained',\r\n                            color : 'primary',\r\n                            className: classes.space,\r\n                            onClick: saveEmployee,\r\n                            size: 'small'\r\n                        }}\r\n                    >\r\n                        Create\r\n                    </ColorButton>\r\n                    <ColorButton\r\n                        color={red}\r\n                        buttonProps={{\r\n                            variant : 'contained',\r\n                            color : 'primary',\r\n                            className: classes.space,\r\n                            onClick: cancel,\r\n                            size: 'small'\r\n                        }}\r\n                    >\r\n                        Cancel\r\n                    </ColorButton>\r\n                </div>\r\n            </form>\r\n        </Paper>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n","import React, {useEffect, useState} from \"react\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport ColorButton from \"./ColorButton\";\r\nimport {green, red} from \"@material-ui/core/colors\";\r\nimport {apiServices} from \"../service/services\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display : 'flex',\r\n        flexDirection : 'column',\r\n        alignItems : 'center',\r\n        width : 450,\r\n        margin : 'auto',\r\n        padding : theme.spacing(),\r\n    },\r\n    form : {\r\n        display : 'flex',\r\n        flexDirection : 'column',\r\n        alignItems : 'center',\r\n        padding: theme.spacing(),\r\n        width : '-webkit-fill-available',\r\n    },\r\n    space : {\r\n        marginBottom: theme.spacing(),\r\n    },\r\n    buttonWrap : {\r\n        width : '-webkit-fill-available',\r\n        display: 'flex',\r\n        justifyContent: 'space-evenly',\r\n    }\r\n}));\r\n\r\nexport default function UpdateEmployee(props) {\r\n    const classes = useStyles();\r\n\r\n    const inputProps = {\r\n        className : classes.space,\r\n        fullWidth : true,\r\n        required : true,\r\n    }\r\n\r\n    const [employeeId, setEmployeeId] = useState(null);\r\n    const [firstName, setFirstName] = useState('');\r\n    const [lastName, setLastName] = useState('');\r\n    const [emailId, setEmailId] = useState('');\r\n\r\n    useEffect(()=>{\r\n        console.log(props.employeeId)\r\n        setEmployeeId(props.employeeId);\r\n        apiServices.employee.get(props.employeeId).then(res=>{\r\n            const e = res.data;\r\n            setFirstName(e.firstName);\r\n            setLastName(e.lastName);\r\n            setEmailId(e.emailId);\r\n        });\r\n    }, [])\r\n\r\n    const saveEmployee = (e) => {\r\n        e.preventDefault();\r\n        if (firstName !== '' && lastName !== '' && emailId !== '') {\r\n            apiServices.employee.update(employeeId,\r\n                {firstName:firstName,\r\n                          lastName:lastName,\r\n                          emailId:emailId})\r\n                .then(res=>{\r\n                    props.setView(\"list\");\r\n                })\r\n        }\r\n    }\r\n\r\n    const cancel = (e) => {\r\n        e.preventDefault();\r\n        props.setView('list');\r\n    }\r\n\r\n    return (\r\n        <Paper className={classes.root}>\r\n            <Typography variant={\"h4\"} className={classes.space}>Update Employee</Typography>\r\n            <form noValidate autoComplete={\"off\"} className={classes.form}>\r\n                <TextField {...inputProps} value={firstName} onChange={(e)=>{setFirstName(e.target.value)}} id={\"firstName\"} label={\"First Name\"}/>\r\n                <TextField {...inputProps} value={lastName}  onChange={(e)=>{setLastName(e.target.value)}} id={\"lastName\"} label={\"Last Name\"}/>\r\n                <TextField {...inputProps} value={emailId}   onChange={(e)=>{setEmailId(e.target.value)}} id={\"emailId\"} label={\"Email Address\"}/>\r\n                <div className={classes.buttonWrap}>\r\n                    <ColorButton\r\n                        color={green}\r\n                        buttonProps={{\r\n                            variant : 'contained',\r\n                            color : 'primary',\r\n                            className: classes.space,\r\n                            onClick: saveEmployee,\r\n                            size: 'small'\r\n                        }}\r\n                    >\r\n                        Update\r\n                    </ColorButton>\r\n                    <ColorButton\r\n                        color={red}\r\n                        buttonProps={{\r\n                            variant : 'contained',\r\n                            color : 'primary',\r\n                            className: classes.space,\r\n                            onClick: cancel,\r\n                            size: 'small'\r\n                        }}\r\n                    >\r\n                        Cancel\r\n                    </ColorButton>\r\n                </div>\r\n            </form>\r\n        </Paper>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n","import React, {useState} from 'react';\nimport Header from \"./components/Header\";\nimport Footer from \"./components/Footer\";\nimport EmployeeList from \"./components/EmployeeList\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport AddEmployee from \"./components/AddEmployee\";\nimport Fade from \"@material-ui/core/Fade\";\nimport UpdateEmployee from \"./components/UpdateEmployee\";\n\n\n\nconst useStyles = makeStyles((theme) => ({\n    container: {\n        padding : theme.spacing(4),\n    }\n}));\n\n\n\nconst fadeTimeout = 500;\n\nfunction App() {\n    const classes = useStyles();\n    const [view, setView] = useState(\"list\");\n    const [fade, setFade] = useState(true);\n    const [updateId, setUpdateId] = useState(1);\n\n    const toggleView = (v, id=1) => {\n        if (v !== view) {\n            setUpdateId(id);\n            setFade(false);\n            setTimeout(function () {\n                setView(v);\n                setFade(true);\n            },fadeTimeout);\n        }\n    }\n\n      return (\n        <div className=\"App\">\n            <Header setView={toggleView}/>\n            <div className={classes.container}>\n                <Fade in={fade} timeout={fadeTimeout}>\n                    <div>\n                        {(view === \"list\")?<EmployeeList setView={toggleView}/>:null}\n                        {(view === \"add\")?<AddEmployee setView={toggleView}/>:null}\n                        {(view === \"update\")?<UpdateEmployee setView={toggleView} employeeId={updateId}/>:null}\n                    </div>\n                </Fade>\n            </div>\n            <Footer/>\n        </div>\n      );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'fontsource-roboto';\nimport {createMuiTheme, ThemeProvider} from '@material-ui/core/styles';\nimport rawTheme from './theme.json'\nconst theme = createMuiTheme(rawTheme)\n\nReactDOM.render(\n  <React.StrictMode>\n      <ThemeProvider theme={theme}>\n          <App />\n      </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}