{"version":3,"sources":["components/Header.jsx","components/Footer.jsx","service/URLS.js","components/EmployeeList.jsx","service/EmployeeService.js","service/EmployeeCount.js","App.js","serviceWorker.js","index.js"],"names":["Header","AppBar","color","Toolbar","variant","Typography","useStyles","makeStyles","theme","root","backgroundColor","display","flexDirection","alignItems","palette","text","primary","paddingLeft","spacing","paddingRight","Footer","classes","className","EMPLOYEE_URL","toString","redButton","createMuiTheme","red","shape","borderRadius","EmployeeList","useState","rows","setRows","page","setPage","size","setSize","count","setCount","getData","p","s","axios","get","params","Number","EmployeeService","then","res","data","useEffect","Paper","TableContainer","component","Table","TableHead","TableRow","TableCell","align","TableBody","map","row","key","scope","id","firstName","lastName","Button","style","marginRight","ThemeProvider","TablePagination","rowsPerPageOptions","rowsPerPage","onChangePage","e","newPage","onChangeRowsPerPage","parseInt","target","value","console","log","marginTop","container","padding","App","Boolean","window","location","hostname","match","rawTheme","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.43c5c730.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {AppBar, Toolbar, Typography} from \"@material-ui/core\";\r\nexport default function Header() {\r\n    return (\r\n        <div>\r\n            <AppBar color={\"default\"}>\r\n                <Toolbar variant={\"dense\"}>\r\n                    <Typography variant={\"h6\"}>\r\n                        Employees CRUD\r\n                    </Typography>\r\n                </Toolbar>\r\n            </AppBar>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport {Typography} from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        backgroundColor: '#212121',\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        alignItems: 'center',\r\n        color : theme.palette.text.primary,\r\n        paddingLeft: theme.spacing(),\r\n        paddingRight: theme.spacing(),\r\n    }\r\n}));\r\n\r\nexport default function Footer() {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <footer className={classes.root}>\r\n            <Typography>Chris Brighton</Typography>\r\n        </footer>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n","\r\nconst VERSION = 1;\r\nconst BASE_URL = \"http://localhost:8080/api/v\" + VERSION.toString() + \"/\";\r\nexport const EMPLOYEE_URL = BASE_URL + \"employee\";","import React, {useEffect, useState} from \"react\";\r\nimport {\r\n    Button, createMuiTheme,\r\n    Paper,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    Typography\r\n} from \"@material-ui/core\";\r\nimport EmployeeService from \"../service/EmployeeService\";\r\nimport red from \"@material-ui/core/colors/red\";\r\nimport {ThemeProvider} from \"@material-ui/styles\";\r\nimport TablePagination from \"@material-ui/core/TablePagination\";\r\nimport EmployeeCount from \"../service/EmployeeCount\";\r\n\r\nconst redButton = createMuiTheme({\r\n    palette : {primary : red},\r\n    shape : {borderRadius : 0},\r\n})\r\n\r\nexport default function EmployeeList() {\r\n    const [rows, setRows] = useState([]);\r\n    const [page, setPage] = useState(0);\r\n    const [size, setSize] = useState(5);\r\n    const [count, setCount] = useState(0);\r\n\r\n\r\n    const changePage = (e, newPage) => {\r\n        setPage(newPage);\r\n        getData(newPage, size);\r\n    }\r\n\r\n    const changeSize = (e) => {\r\n        setSize(parseInt(e.target.value));\r\n        setPage(0);\r\n        console.log(\"size\", parseInt(e.target.value))\r\n        getData(0,  parseInt(e.target.value));\r\n    }\r\n\r\n    const getData = (p, s) => {\r\n        EmployeeService(p, s).then(res=>{\r\n            setRows(res.data);\r\n        });\r\n    }\r\n\r\n    useEffect(()=>{\r\n        EmployeeCount().then(res=>{\r\n            setCount(res.data);\r\n        })\r\n        getData(page, size);\r\n    }, [])\r\n    return (\r\n        <Paper>\r\n            <TableContainer component={Paper}>\r\n                <Table size={\"small\"}>\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell component={\"th\"} align={\"center\"}>Id</TableCell>\r\n                            <TableCell component={\"th\"} align={\"center\"}>First Name</TableCell>\r\n                            <TableCell component={\"th\"} align={\"center\"}>Last Name</TableCell>\r\n                            <TableCell component={\"th\"} align={\"right\"}>Actions</TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {\r\n                            rows.map((row, key)=> (\r\n                                <TableRow key={key}>\r\n                                    <TableCell align={\"center\"} component={\"th\"} scope={\"row\"}>\r\n                                        {row.id}\r\n                                    </TableCell>\r\n                                    <TableCell align={\"center\"}>{row.firstName}</TableCell>\r\n                                    <TableCell align={\"center\"}>{row.lastName}</TableCell>\r\n                                    <TableCell align={\"right\"}>\r\n                                        <Button variant={\"contained\"} style={{marginRight : '20px'}} color={\"secondary\"}>Edit</Button>\r\n                                        <ThemeProvider theme={redButton}>\r\n                                            <Button color={\"primary\"} variant={\"contained\"}>Delete</Button>\r\n                                        </ThemeProvider>\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ))\r\n                        }\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n            <TablePagination\r\n                rowsPerPageOptions={[5, 10, 25]}\r\n                component=\"div\"\r\n                rowsPerPage={size}\r\n                page={page}\r\n                count={count}\r\n                onChangePage={changePage}\r\n                onChangeRowsPerPage={changeSize}\r\n                style={{marginTop: '20px'}}\r\n            />\r\n        </Paper>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n","import axios from 'axios';\r\nimport {EMPLOYEE_URL} from \"./URLS\";\r\n\r\nexport default function EmployeeService(page, size) {\r\n    return axios.get(`${EMPLOYEE_URL}/paged-list`, {params:{page : Number(page) , size: Number(size)}})\r\n}","import axios from 'axios';\r\nimport {EMPLOYEE_URL} from \"./URLS\";\r\n\r\nexport default  function EmployeeCount() {\r\n    return axios.get(`${EMPLOYEE_URL}/count`)\r\n}","import React, {useEffect, useState} from 'react';\nimport Header from \"./components/Header\";\nimport Footer from \"./components/Footer\";\nimport EmployeeList from \"./components/EmployeeList\";\nimport { makeStyles, } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n    container: {\n        padding : theme.spacing(),\n    }\n}));\n\nfunction App() {\n    const classes = useStyles();\n      return (\n        <div className=\"App\">\n            <Header/>\n            <div className={classes.container}>\n                <EmployeeList/>\n            </div>\n            <Footer/>\n        </div>\n      );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'fontsource-roboto';\nimport {createMuiTheme, ThemeProvider} from '@material-ui/core/styles';\nimport rawTheme from './theme.json'\n\nconst theme = createMuiTheme(rawTheme)\n\nReactDOM.render(\n  <React.StrictMode>\n      <ThemeProvider theme={theme}>\n          <App />\n      </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}