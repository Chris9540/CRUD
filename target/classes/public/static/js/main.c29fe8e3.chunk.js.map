{"version":3,"sources":["components/Header.jsx","components/Footer.jsx","service/URLS.js","service/services.js","components/EmployeeList.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","AppBar","color","Toolbar","variant","Typography","useStyles","makeStyles","theme","root","backgroundColor","display","flexDirection","alignItems","palette","text","primary","paddingLeft","spacing","paddingRight","Footer","classes","className","EMPLOYEE_URL","toString","apiServices","list","page","size","axios","get","params","Number","count","redButton","createMuiTheme","red","shape","borderRadius","container","maxHeight","minHeight","height","header","EmployeeList","useState","rows","setRows","setPage","setSize","setCount","getData","p","s","then","res","data","useEffect","Paper","TableContainer","component","Table","stickyHeader","TableHead","TableRow","TableCell","align","TableBody","map","row","key","scope","id","firstName","lastName","Button","style","marginRight","ThemeProvider","TablePagination","rowsPerPageOptions","rowsPerPage","onChangePage","e","newPage","onChangeRowsPerPage","parseInt","target","value","console","log","padding","App","Boolean","window","location","hostname","match","rawTheme","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c29fe8e3.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {AppBar, Toolbar, Typography} from \"@material-ui/core\";\r\nexport default function Header() {\r\n    return (\r\n        <div>\r\n            <AppBar color={\"default\"}>\r\n                <Toolbar variant={\"dense\"}>\r\n                    <Typography variant={\"h6\"}>\r\n                        Employees CRUD\r\n                    </Typography>\r\n                </Toolbar>\r\n            </AppBar>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport {Typography} from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        backgroundColor: '#212121',\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        alignItems: 'center',\r\n        color : theme.palette.text.primary,\r\n        paddingLeft: theme.spacing(),\r\n        paddingRight: theme.spacing(),\r\n    }\r\n}));\r\n\r\nexport default function Footer() {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <footer className={classes.root}>\r\n            <Typography>Chris Brighton</Typography>\r\n        </footer>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n","\r\nconst VERSION = 1;\r\nconst BASE_URL = \"http://localhost:8080/api/v\" + VERSION.toString() + \"/\";\r\nexport const EMPLOYEE_URL = BASE_URL + \"employee\";","import axios from 'axios';\r\nimport {EMPLOYEE_URL} from \"./URLS\";\r\n\r\nexport const apiServices = {\r\n    employee : {\r\n        list : function (page = 0, size = 5) {\r\n            return axios.get(`${EMPLOYEE_URL}/paged-list`, {params:{page : Number(page) , size: Number(size)}})\r\n        },\r\n        count : function () {\r\n            return axios.get(`${EMPLOYEE_URL}/count`)\r\n        },\r\n    },\r\n};","import React, {useEffect, useState} from \"react\";\r\nimport {\r\n    Button, createMuiTheme,\r\n    Paper,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    Typography\r\n} from \"@material-ui/core\";\r\nimport red from \"@material-ui/core/colors/red\";\r\nimport {makeStyles, ThemeProvider} from \"@material-ui/styles\";\r\nimport TablePagination from \"@material-ui/core/TablePagination\";\r\nimport {apiServices} from \"../service/services\";\r\n\r\nconst redButton = createMuiTheme({\r\n    palette : {primary : red},\r\n    shape : {borderRadius : 0},\r\n})\r\nconst height = 282;\r\nconst useStyles = makeStyles((theme) => ({\r\n    container : {\r\n        maxHeight : height,\r\n        minHeight : height,\r\n        height : height,\r\n    },\r\n    header : {\r\n        '&th' : {\r\n            backgroundColor : '#212121'\r\n        }\r\n    }\r\n}))\r\n\r\nexport default function EmployeeList() {\r\n    const [rows, setRows] = useState([]);\r\n    const [page, setPage] = useState(0);\r\n    const [size, setSize] = useState(5);\r\n    const [count, setCount] = useState(-1);\r\n    const classes = useStyles();\r\n\r\n\r\n    const changePage = (e, newPage) => {\r\n        setPage(newPage);\r\n        getData(newPage, size);\r\n    }\r\n\r\n    const changeSize = (e) => {\r\n        setSize(parseInt(e.target.value));\r\n        setPage(0);\r\n        console.log(\"size\", parseInt(e.target.value))\r\n        getData(0,  parseInt(e.target.value));\r\n    }\r\n\r\n    const getData = (p, s) => {\r\n        apiServices.employee.list(p, s).then(res=>{\r\n            setRows(res.data);\r\n        });\r\n    }\r\n\r\n    useEffect(()=>{\r\n        if (count === -1) {\r\n            apiServices.employee.count().then(res=>{\r\n                setCount(res.data);\r\n            })\r\n            getData(page, size);\r\n        }\r\n    }, [])\r\n    return (\r\n        <Paper>\r\n            <TableContainer component={\"div\"} className={classes.container}>\r\n                <Table size={\"small\"} stickyHeader>\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell component={\"th\"} align={\"center\"}>Id</TableCell>\r\n                            <TableCell component={\"th\"} align={\"center\"}>First Name</TableCell>\r\n                            <TableCell component={\"th\"} align={\"center\"}>Last Name</TableCell>\r\n                            <TableCell component={\"th\"} align={\"right\"}>Actions</TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {\r\n                            rows.map((row, key)=> (\r\n                                <TableRow key={key}>\r\n                                    <TableCell align={\"center\"} component={\"th\"} scope={\"row\"}>\r\n                                        {row.id}\r\n                                    </TableCell>\r\n                                    <TableCell align={\"center\"}>{row.firstName}</TableCell>\r\n                                    <TableCell align={\"center\"}>{row.lastName}</TableCell>\r\n                                    <TableCell align={\"right\"}>\r\n                                        <Button variant={\"contained\"} style={{marginRight : '20px'}} color={\"secondary\"}>Edit</Button>\r\n                                        <ThemeProvider theme={redButton}>\r\n                                            <Button color={\"primary\"} variant={\"contained\"}>Delete</Button>\r\n                                        </ThemeProvider>\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ))\r\n                        }\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n            <TablePagination\r\n                rowsPerPageOptions={[5, 10, 25]}\r\n                component=\"div\"\r\n                rowsPerPage={size}\r\n                page={page}\r\n                count={count}\r\n                onChangePage={changePage}\r\n                onChangeRowsPerPage={changeSize}\r\n            />\r\n        </Paper>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n","import React, {useEffect, useState} from 'react';\nimport Header from \"./components/Header\";\nimport Footer from \"./components/Footer\";\nimport EmployeeList from \"./components/EmployeeList\";\nimport { makeStyles, } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n    container: {\n        padding : theme.spacing(),\n    }\n}));\n\nfunction App() {\n    const classes = useStyles();\n      return (\n        <div className=\"App\">\n            <Header/>\n            <div className={classes.container}>\n                <EmployeeList/>\n            </div>\n            <Footer/>\n        </div>\n      );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'fontsource-roboto';\nimport {createMuiTheme, ThemeProvider} from '@material-ui/core/styles';\nimport rawTheme from './theme.json'\n\nconst theme = createMuiTheme(rawTheme)\n\nReactDOM.render(\n  <React.StrictMode>\n      <ThemeProvider theme={theme}>\n          <App />\n      </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}